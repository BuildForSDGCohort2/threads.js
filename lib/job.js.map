{"version":3,"sources":["job.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;6BACyB,eAAe;;;;IAEnB,GAAG;YAAH,GAAG;;AACX,WADQ,GAAG,CACV,IAAI,EAAE;0BADC,GAAG;;AAEpB,+BAFiB,GAAG,6CAEZ;AACR,QAAI,CAAC,IAAI,GAAK,IAAI,CAAC;;AAEnB,QAAI,CAAC,OAAO,GAAG,EAAE,CAAC;AAClB,QAAI,CAAC,kBAAkB,EAAE,CAAC;;AAE1B,QAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;GAC3B;;eATkB,GAAG;;WAWnB,eAAU;wCAAN,IAAI;AAAJ,YAAI;;;AACT,UAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;AACrB,cAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;OAC1D;;AAED,UAAI,CAAC,OAAO,GAAG,IAAI,CAAC;AACpB,aAAO,IAAI,CAAC;KACb;;;WAEG,gBAAU;AACZ,UAAI,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;AAC7B,cAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;OAClD;;yCAHK,IAAI;AAAJ,YAAI;;;AAKV,UAAI,IAAI,CAAC,gBAAgB,EAAE,EAAE;;;;AAE3B,eAAO,6BAAA,IAAI,CAAC,KAAK,EAAE,CAAC,kBAAkB,EAAE,EAAC,IAAI,MAAA,4BAAI,IAAI,CAAC,CAAC;OACxD;;AAED,UAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AACrB,UAAI,CAAC,YAAY,GAAG,IAAI,CAAC;;AAEzB,UAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AACxB,aAAO,IAAI,CAAC;KACb;;;WAEQ,mBAAC,MAAM,EAAE;;;AAChB,+BAAA,qBAAA,MAAM,CACH,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAC7C,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,EAC5C,GAAG,MAAA,uCAAI,IAAI,CAAC,OAAO,EAAC,EACpB,IAAI,MAAA,2CAAI,IAAI,CAAC,QAAQ,EAAC,CAAC;AAC1B,aAAO,IAAI,CAAC;KACb;;;WAEI,iBAAG;AACN,UAAM,KAAK,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;AAEjC,UAAI,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;AAC3B,aAAK,CAAC,GAAG,MAAA,CAAT,KAAK,qBAAQ,IAAI,CAAC,OAAO,EAAC,CAAC;OAC5B;AACD,UAAI,IAAI,CAAC,YAAY,EAAE;AACrB,aAAK,CAAC,IAAI,MAAA,CAAV,KAAK,qBAAS,IAAI,CAAC,QAAQ,EAAC,CAAC;OAC9B;;AAED,aAAO,KAAK,CAAC;KACd;;;WAEe,4BAAG;AACjB,aAAO,IAAI,CAAC,YAAY,CAAC;KAC1B;;;WAEiB,8BAAG;AACnB,UAAI,CAAC,YAAY,GAAI,KAAK,CAAC;AAC3B,UAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;AACnB,aAAO,IAAI,CAAC;KACb;;;SAnEkB,GAAG;;;qBAAH,GAAG","file":"job.js","sourcesContent":["\nimport EventEmitter from 'eventemitter3';\n\nexport default class Job extends EventEmitter {\n  constructor(pool) {\n    super();\n    this.pool   = pool;\n\n    this.runArgs = [];\n    this.clearSendParameter();\n\n    pool.emit('newJob', this);\n  }\n\n  run(...args) {\n    if (args.length === 0) {\n      throw new Error('Cannot call .run() without arguments.');\n    }\n\n    this.runArgs = args;\n    return this;\n  }\n\n  send(...args) {\n    if (this.runArgs.length === 0) {\n      throw new Error('Cannot .send() before .run().');\n    }\n\n    if (this.hasSendParameter()) {\n      // do not alter this job, clone it and set send param instead\n      return this.clone().clearSendParameter().send(...args);\n    }\n\n    this.sendArgs = args;\n    this.parameterSet = true;\n\n    this.emit('readyToRun');\n    return this;\n  }\n\n  executeOn(thread) {\n    thread\n      .once('message', this.emit.bind(this, 'done'))\n      .once('error', this.emit.bind(this, 'error'))\n      .run(...this.runArgs)\n      .send(...this.sendArgs);\n    return this;\n  }\n\n  clone() {\n    const clone = new Job(this.pool);\n\n    if (this.runArgs.length > 0) {\n      clone.run(...this.runArgs);\n    }\n    if (this.parameterSet) {\n      clone.send(...this.sendArgs);\n    }\n\n    return clone;\n  }\n\n  hasSendParameter() {\n    return this.parameterSet;\n  }\n\n  clearSendParameter() {\n    this.parameterSet  = false;\n    this.sendArgs = [];\n    return this;\n  }\n}\n"],"sourceRoot":"/source/"}